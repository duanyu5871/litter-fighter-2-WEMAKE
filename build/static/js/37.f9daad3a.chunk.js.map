{"version":3,"file":"static/js/37.f9daad3a.chunk.js","mappings":"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","sources":["behavior/index.ts","../node_modules/three/src/math/MathUtils.js","Laboratory/BehaviorNet/Creature.tsx","Laboratory/BehaviorNet/Cat.tsx","Laboratory/BehaviorNet/index.tsx","Laboratory/BehaviorNet/Ground.tsx"],"sourcesContent":["export namespace Behavior {\r\n  export interface INode<Data = any, Context = any> {\r\n    readonly is_bebavior_node: true;\r\n    readonly name: string;\r\n    data: Data;\r\n    context: Context;\r\n    on_enter?(from: IConn<Data, Context> | INode | undefined, self: this): void;\r\n    on_leave?(to: IConn<Data, Context> | INode | undefined, self: this): void;\r\n    on_update?(delta_time: number, self: this): void;\r\n  }\r\n  export interface IConn<\r\n    Data1 = any,\r\n    Context1 = any,\r\n    Data2 = any,\r\n    Context2 = any,\r\n  > {\r\n    readonly is_bebavior_conn: true;\r\n    readonly start: INode<Data1, Context1>;\r\n    readonly end: INode<Data2, Context2>;\r\n    readonly judge: (\r\n      delta_time: number,\r\n      from: INode<Data1, Context1>,\r\n      to: INode<Data2, Context2>,\r\n    ) => boolean;\r\n  }\r\n  export function is_node(v: any): v is INode {\r\n    return v && v.is_bebavior_node === true;\r\n  }\r\n  export function is_connection(v: any): v is IConn {\r\n    return v && v.is_bebavior_conn === true;\r\n  }\r\n  export class Actor {\r\n    is_debug: boolean = false;\r\n    warn = (_msg: string) => {};\r\n    protected _behavior?: INode;\r\n    protected _behavior_map = new Map<string, INode>();\r\n    protected _connection_list = new Map<string, IConn[]>();\r\n    get behavior() {\r\n      return this._behavior;\r\n    }\r\n    add_behavior(...behavior_array: (INode | _Noding)[]): this {\r\n      for (const item of behavior_array) {\r\n        const behavior = is_node(item) ? item : item.done();\r\n        if (this.is_debug) {\r\n          const other = this._behavior_map.get(behavior.name);\r\n          if (other && other !== behavior) {\r\n            this.warn(\r\n              `behavior name ${JSON.stringify(behavior.name)} already exists, will replace it.`,\r\n            );\r\n            debugger;\r\n          }\r\n        }\r\n        this._behavior_map.set(behavior.name, behavior);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    find_behavior(name: string): INode | undefined {\r\n      return this._behavior_map.get(name);\r\n    }\r\n\r\n    use_behavior(name: string) {\r\n      const next = this.find_behavior(name);\r\n      if (!next) {\r\n        this.warn(`behavior name ${JSON.stringify(name)} not found.`);\r\n        debugger;\r\n        return this;\r\n      }\r\n      const prev = this._behavior;\r\n      prev?.on_leave?.(next, prev);\r\n      this._behavior = next;\r\n      next.on_enter?.(prev, next);\r\n      return this;\r\n    }\r\n\r\n    add_connection(...connections: (IConn | _Connecting)[]) {\r\n      for (const what of connections) {\r\n        const conn = is_connection(what) ? what : what.done();\r\n        const { start, end } = conn;\r\n        this.add_behavior(start, end);\r\n        let connection_array = this._connection_list.get(start.name);\r\n        if (!connection_array) {\r\n          this._connection_list.set(start.name, (connection_array = []));\r\n        }\r\n        connection_array.push(conn);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    update(delta_time: number) {\r\n      if (!this._behavior) return;\r\n      this._behavior.on_update?.(delta_time, this._behavior);\r\n      const connections = this._connection_list.get(this._behavior.name);\r\n\r\n      if (!connections?.length) return;\r\n      for (const connection of connections) {\r\n        if (!connection.judge?.(delta_time, connection.start, connection.end))\r\n          continue;\r\n        this._behavior.on_leave?.(connection, this._behavior);\r\n        this._behavior = connection.end;\r\n        connection.end.on_enter?.(connection, connection.end);\r\n      }\r\n    }\r\n  }\r\n\r\n  class _Noding<\r\n    Data = any,\r\n    Context = any,\r\n    N extends INode<Data, Context> = INode<Data, Context>,\r\n  > {\r\n    private _name: N[\"name\"];\r\n    private _data: N[\"data\"] | undefined;\r\n    private _context: N[\"context\"] | undefined;\r\n    private _on_enter: N[\"on_enter\"] | undefined;\r\n    private _on_leave: N[\"on_leave\"] | undefined;\r\n    private _on_update: N[\"on_update\"] | undefined;\r\n    private _actor: Actor | undefined;\r\n    get_data() {\r\n      return this._data;\r\n    }\r\n    get_name() {\r\n      return this._name;\r\n    }\r\n    get_context() {\r\n      return this._on_enter;\r\n    }\r\n    get_on_enter() {\r\n      return this._on_enter;\r\n    }\r\n    get_on_leave() {\r\n      return this._on_leave;\r\n    }\r\n    get_on_update() {\r\n      return this._on_update;\r\n    }\r\n    actor(v: Actor) {\r\n      this._actor = v;\r\n      return this;\r\n    }\r\n    on_enter(fn: N[\"on_enter\"]) {\r\n      this._on_enter = fn;\r\n      return this;\r\n    }\r\n    on_leave(fn: N[\"on_leave\"]) {\r\n      this._on_leave = fn;\r\n      return this;\r\n    }\r\n    on_update(fn: N[\"on_update\"]) {\r\n      this._on_update = fn;\r\n      return this;\r\n    }\r\n    constructor(name: string, data: Data, context: Context) {\r\n      this._name = name;\r\n      this._data = data;\r\n      this._context = context;\r\n    }\r\n    done(): N {\r\n      const ret: INode = {\r\n        is_bebavior_node: true,\r\n        name: this._name,\r\n        data: this._data,\r\n        context: this._context,\r\n        on_enter: this._on_enter,\r\n        on_leave: this._on_leave,\r\n        on_update: this._on_update,\r\n      };\r\n      if (this._actor) this._actor.add_behavior(ret);\r\n      return ret as N;\r\n    }\r\n  }\r\n  export function Noding<Data = any, Context = any>(\r\n    name: string,\r\n  ): _Noding<Data, Context>;\r\n  export function Noding<Data = any, Context = any>(\r\n    name: string,\r\n    data: Data,\r\n  ): _Noding<Data, Context>;\r\n  export function Noding<Data = any, Context = any>(\r\n    name: string,\r\n    data: Data,\r\n    context: Context,\r\n  ): _Noding<Data, Context>;\r\n  export function Noding<Data = any, Context = any>(\r\n    name: string,\r\n    data?: Data,\r\n    context?: Context,\r\n  ): _Noding {\r\n    return new _Noding(name, data, context);\r\n  }\r\n\r\n  class _Connecting<D1 = any, C1 = any, D2 = any, C2 = any> {\r\n    private _actor: Actor | undefined;\r\n    private _judge: IConn[\"judge\"] = () => false;\r\n    private _start?: _Noding<any, any, INode<any, any>>;\r\n    private _end?: _Noding<any, any, INode<any, any>>;\r\n\r\n    constructor(actor?: Actor) {\r\n      this._actor = actor;\r\n    }\r\n    get_start() {\r\n      return this._start ? this._start : Noding(\"start_not_set\");\r\n    }\r\n    get_end() {\r\n      return this._end ? this._end : Noding(\"end_not_set\");\r\n    }\r\n\r\n    actor(v: Actor) {\r\n      this._actor = v;\r\n      return this;\r\n    }\r\n    judge(fn: typeof this._judge): this {\r\n      this._judge = fn;\r\n      return this;\r\n    }\r\n    start(name: string): _Connecting<D1, C1, D2, C2>;\r\n    start<Data = any>(name: string, data: Data): _Connecting<Data, C1, D2, C2>;\r\n    start<Data = any, Context = any>(\r\n      name: string,\r\n      data: Data,\r\n      context: Context,\r\n    ): _Connecting<Data, Context, D2, C2>;\r\n    start<Data = any, Context = any>(\r\n      name: string,\r\n      data?: Data,\r\n      context?: Context,\r\n    ): this {\r\n      this._start = new _Noding(name, data, context) as any;\r\n      return this;\r\n    }\r\n\r\n    end(name: string): _Connecting<D1, C1, D2, C2>;\r\n    end<Data = any>(name: string, data: Data): _Connecting<D1, C1, Data, C2>;\r\n    end<Data = any, Context = any>(\r\n      name: string,\r\n      data: Data,\r\n      context: Context,\r\n    ): _Connecting<D1, C1, Data, Context>;\r\n    end<Data = any, Context = any>(\r\n      name: string,\r\n      data?: Data,\r\n      context?: Context,\r\n    ): this {\r\n      this._end = new _Noding(name, data, context) as any;\r\n      return this;\r\n    }\r\n\r\n    on_start_enter(...args: Parameters<_Noding<D1, C1>[\"on_enter\"]>) {\r\n      this.get_start().on_enter(...args);\r\n      return this;\r\n    }\r\n    on_start_leave(...args: Parameters<_Noding<D1, C1>[\"on_leave\"]>) {\r\n      this.get_start().on_leave(...args);\r\n      return this;\r\n    }\r\n    on_start_update(...args: Parameters<_Noding<D1, C1>[\"on_update\"]>) {\r\n      this.get_start().on_update(...args);\r\n      return this;\r\n    }\r\n    on_end_enter(...args: Parameters<_Noding<D1, C1>[\"on_enter\"]>) {\r\n      this.get_end().on_enter(...args);\r\n      return this;\r\n    }\r\n    on_end_leave(...args: Parameters<_Noding<D1, C1>[\"on_leave\"]>) {\r\n      this.get_end().on_leave(...args);\r\n      return this;\r\n    }\r\n    on_end_update(...args: Parameters<_Noding<D1, C1>[\"on_update\"]>) {\r\n      this.get_end().on_update(...args);\r\n      return this;\r\n    }\r\n    done(): IConn {\r\n      const start = this.get_start();\r\n      const end = this.get_end();\r\n\r\n      const bebavior_s =\r\n        this._actor?.find_behavior(start.get_name()) || start.done();\r\n      const bebavior_e =\r\n        this._actor?.find_behavior(end.get_name()) || end.done();\r\n\r\n      bebavior_s.data = bebavior_s.data ?? start.get_data();\r\n      bebavior_s.context = bebavior_s.context ?? start.get_context();\r\n      bebavior_s.on_enter = bebavior_s.on_enter ?? start.get_on_enter();\r\n      bebavior_s.on_leave = bebavior_s.on_leave ?? start.get_on_leave();\r\n      bebavior_s.on_update = bebavior_s.on_update ?? start.get_on_update();\r\n\r\n      bebavior_e.data = bebavior_e.data ?? end.get_data();\r\n      bebavior_e.context = bebavior_e.context ?? end.get_context();\r\n      bebavior_e.on_enter = bebavior_e.on_enter ?? end.get_on_enter();\r\n      bebavior_e.on_leave = bebavior_e.on_leave ?? end.get_on_leave();\r\n      bebavior_e.on_update = bebavior_e.on_update ?? end.get_on_update();\r\n\r\n      const ret: IConn = {\r\n        is_bebavior_conn: true,\r\n        start: bebavior_s,\r\n        end: bebavior_e,\r\n        judge: this._judge,\r\n      };\r\n      if (this._actor) this._actor.add_connection(ret);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  export function Connecting(actor?: Actor) {\r\n    return new _Connecting(actor);\r\n  }\r\n}\r\n","const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n/**\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n * (universally unique identifier).\n *\n * @return {string} The UUID.\n */\nfunction generateUUID() {\n\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\n/**\n * Clamps the given value between min and max.\n *\n * @param {number} value - The value to clamp.\n * @param {number} min - The min value.\n * @param {number} max - The max value.\n * @return {number} The clamped value.\n */\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n/**\n * Computes the Euclidean modulo of the given parameters that\n * is `( ( n % m ) + m ) % m`.\n *\n * @param {number} n - The first parameter.\n * @param {number} m - The second parameter.\n * @return {number} The Euclidean modulo.\n */\nfunction euclideanModulo( n, m ) {\n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n/**\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n * for the given value.\n *\n * @param {number} x - The value to be mapped.\n * @param {number} a1 - Minimum value for range A.\n * @param {number} a2 - Maximum value for range A.\n * @param {number} b1 - Minimum value for range B.\n * @param {number} b2 - Maximum value for range B.\n * @return {number} The mapped value.\n */\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n/**\n * Returns the percentage in the closed interval `[0, 1]` of the given value\n * between the start and end point.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} value - A value between start and end.\n * @return {number} The interpolation factor.\n */\nfunction inverseLerp( x, y, value ) {\n\n\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n/**\n * Returns a value linearly interpolated from two known points based on the given interval -\n * `t = 0` will return `x` and `t = 1` will return `y`.\n *\n * @param {number} x - The start point\n * @param {number} y - The end point.\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n * @return {number} The interpolated value.\n */\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n/**\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n * time to maintain frame rate independent movement. For details, see\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n *\n * @param {number} x - The current point.\n * @param {number} y - The target point.\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\n * and a lower value will make the movement more gradual.\n * @param {number} dt - Delta time in seconds.\n * @return {number} The interpolated value.\n */\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n/**\n * Returns a value that alternates between `0` and the given `length` parameter.\n *\n * @param {number} x - The value to pingpong.\n * @param {number} [length=1] - The positive value the function will pingpong to.\n * @return {number} The alternated value.\n */\nfunction pingpong( x, length = 1 ) {\n\n\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n/**\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n * the `min` and `max`.\n *\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\n/**\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n *\n * @param {number} x - The value to evaluate based on its position between min and max.\n * @param {number} min - The min value. Any x value below min will be `0`.\n * @param {number} max - The max value. Any x value above max will be `1`.\n * @return {number} The alternated value.\n */\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n/**\n * Returns a random integer from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random integer.\n */\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n/**\n * Returns a random float from `<low, high>` interval.\n *\n * @param {number} low - The lower value boundary.\n * @param {number} high - The upper value boundary\n * @return {number} A random float.\n */\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n/**\n * Returns a random integer from `<-range/2, range/2>` interval.\n *\n * @param {number} range - Defines the value range.\n * @return {number} A random float.\n */\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n/**\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n *\n * @param {number} [s] - The integer seed.\n * @return {number} A random float.\n */\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} degrees - A value in degrees.\n * @return {number} The converted value in radians.\n */\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\n/**\n * Converts radians to degrees.\n *\n * @param {number} radians - A value in radians.\n * @return {number} The converted value in degrees.\n */\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\n/**\n * Returns `true` if the given number is a power of two.\n *\n * @param {number} value - The value to check.\n * @return {boolean} Whether the given number is a power of two or not.\n */\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\n/**\n * Returns the smallest power of two that is greater than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The smallest power of two that is greater than or equal to the given number.\n */\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Returns the largest power of two that is less than or equal to the given number.\n *\n * @param {number} value - The value to find a POT for.\n * @return {number} The largest power of two that is less than or equal to the given number.\n */\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\n/**\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n * defined by the given angles and order.\n *\n * Rotations are applied to the axes in the order specified by order:\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n *\n * @param {Quaternion} q - The quaternion to set.\n * @param {number} a - The rotation applied to the first axis, in radians.\n * @param {number} b - The rotation applied to the second axis, in radians.\n * @param {number} c - The rotation applied to the third axis, in radians.\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n */\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\n/**\n * Denormalizes the given value according to the given typed array.\n *\n * @param {number} value - The value to denormalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The denormalize (float) value in the range `[0,1]`.\n */\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, - 1.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * Normalizes the given value according to the given typed array.\n *\n * @param {number} value - The float value in the range `[0,1]` to normalize.\n * @param {TypedArray} array - The typed array that defines the data type of the value.\n * @return {number} The normalize value.\n */\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n/**\n * @class\n * @classdesc A collection of math utility functions.\n * @hideconstructor\n */\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\t/**\n\t * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\n\t * (universally unique identifier).\n\t *\n\t * @static\n\t * @method\n\t * @return {string} The UUID.\n\t */\n\tgenerateUUID: generateUUID,\n\t/**\n\t * Clamps the given value between min and max.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to clamp.\n\t * @param {number} min - The min value.\n\t * @param {number} max - The max value.\n\t * @return {number} The clamped value.\n\t */\n\tclamp: clamp,\n\t/**\n\t * Computes the Euclidean modulo of the given parameters that\n\t * is `( ( n % m ) + m ) % m`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} n - The first parameter.\n\t * @param {number} m - The second parameter.\n\t * @return {number} The Euclidean modulo.\n\t */\n\teuclideanModulo: euclideanModulo,\n\t/**\n\t * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\n\t * for the given value.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to be mapped.\n\t * @param {number} a1 - Minimum value for range A.\n\t * @param {number} a2 - Maximum value for range A.\n\t * @param {number} b1 - Minimum value for range B.\n\t * @param {number} b2 - Maximum value for range B.\n\t * @return {number} The mapped value.\n\t */\n\tmapLinear: mapLinear,\n\t/**\n\t * Returns the percentage in the closed interval `[0, 1]` of the given value\n\t * between the start and end point.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} value - A value between start and end.\n\t * @return {number} The interpolation factor.\n\t */\n\tinverseLerp: inverseLerp,\n\t/**\n\t * Returns a value linearly interpolated from two known points based on the given interval -\n\t * `t = 0` will return `x` and `t = 1` will return `y`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The start point\n\t * @param {number} y - The end point.\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\n\t * @return {number} The interpolated value.\n\t */\n\tlerp: lerp,\n\t/**\n\t * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\n\t * time to maintain frame rate independent movement. For details, see\n\t * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The current point.\n\t * @param {number} y - The target point.\n\t * @param {number} lambda - A higher lambda value will make the movement more sudden,\n\t * and a lower value will make the movement more gradual.\n\t * @param {number} dt - Delta time in seconds.\n\t * @return {number} The interpolated value.\n\t */\n\tdamp: damp,\n\t/**\n\t * Returns a value that alternates between `0` and the given `length` parameter.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to pingpong.\n\t * @param {number} [length=1] - The positive value the function will pingpong to.\n\t * @return {number} The alternated value.\n\t */\n\tpingpong: pingpong,\n\t/**\n\t * Returns a value in the range `[0,1]` that represents the percentage that `x` has\n\t * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\n\t * the `min` and `max`.\n\t *\n\t * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmoothstep: smoothstep,\n\t/**\n\t * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\n\t * that has zero 1st and 2nd order derivatives at x=0 and x=1.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} x - The value to evaluate based on its position between min and max.\n\t * @param {number} min - The min value. Any x value below min will be `0`.\n\t * @param {number} max - The max value. Any x value above max will be `1`.\n\t * @return {number} The alternated value.\n\t */\n\tsmootherstep: smootherstep,\n\t/**\n\t * Returns a random integer from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random integer.\n\t */\n\trandInt: randInt,\n\t/**\n\t * Returns a random float from `<low, high>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} low - The lower value boundary.\n\t * @param {number} high - The upper value boundary\n\t * @return {number} A random float.\n\t */\n\trandFloat: randFloat,\n\t/**\n\t * Returns a random integer from `<-range/2, range/2>` interval.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} range - Defines the value range.\n\t * @return {number} A random float.\n\t */\n\trandFloatSpread: randFloatSpread,\n\t/**\n\t * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} [s] - The integer seed.\n\t * @return {number} A random float.\n\t */\n\tseededRandom: seededRandom,\n\t/**\n\t * Converts degrees to radians.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} degrees - A value in degrees.\n\t * @return {number} The converted value in radians.\n\t */\n\tdegToRad: degToRad,\n\t/**\n\t * Converts radians to degrees.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} radians - A value in radians.\n\t * @return {number} The converted value in degrees.\n\t */\n\tradToDeg: radToDeg,\n\t/**\n\t * Returns `true` if the given number is a power of two.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to check.\n\t * @return {boolean} Whether the given number is a power of two or not.\n\t */\n\tisPowerOfTwo: isPowerOfTwo,\n\t/**\n\t * Returns the smallest power of two that is greater than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The smallest power of two that is greater than or equal to the given number.\n\t */\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\t/**\n\t * Returns the largest power of two that is less than or equal to the given number.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to find a POT for.\n\t * @return {number} The largest power of two that is less than or equal to the given number.\n\t */\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\t/**\n\t * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\n\t * defined by the given angles and order.\n\t *\n\t * Rotations are applied to the axes in the order specified by order:\n\t * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\n\t *\n\t * @static\n\t * @method\n\t * @param {Quaternion} q - The quaternion to set.\n\t * @param {number} a - The rotation applied to the first axis, in radians.\n\t * @param {number} b - The rotation applied to the second axis, in radians.\n\t * @param {number} c - The rotation applied to the third axis, in radians.\n\t * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\n\t */\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\t/**\n\t * Normalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The float value in the range `[0,1]` to normalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The normalize value.\n\t */\n\tnormalize: normalize,\n\t/**\n\t * Denormalizes the given value according to the given typed array.\n\t *\n\t * @static\n\t * @method\n\t * @param {number} value - The value to denormalize.\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\n\t * @return {number} The denormalize (float) value in the range `[0,1]`.\n\t */\n\tdenormalize: denormalize\n};\n\nexport {\n\tDEG2RAD,\n\tRAD2DEG,\n\tgenerateUUID,\n\tclamp,\n\teuclideanModulo,\n\tmapLinear,\n\tinverseLerp,\n\tlerp,\n\tdamp,\n\tpingpong,\n\tsmoothstep,\n\tsmootherstep,\n\trandInt,\n\trandFloat,\n\trandFloatSpread,\n\tseededRandom,\n\tdegToRad,\n\tradToDeg,\n\tisPowerOfTwo,\n\tceilPowerOfTwo,\n\tfloorPowerOfTwo,\n\tsetQuaternionFromProperEuler,\n\tnormalize,\n\tdenormalize,\n\tMathUtils\n};\n","import { clamp } from \"three/src/math/MathUtils\";\r\nimport { Behavior } from \"../../behavior\";\r\nimport { Ditto } from \"../../LF2/ditto\";\r\nimport { Ground } from \"./Ground\";\r\n\r\nexport class Creature {\r\n  ground?: Ground;\r\n  pos = new Ditto.Vector2(0, 0);\r\n  name = \"Creature\";\r\n  color = \"red\";\r\n  actor = new Behavior.Actor();\r\n  update(delta_time: number) {\r\n    this.pos.x = clamp(this.pos.x, 0, this.ground?.size.x || 0);\r\n    this.pos.y = clamp(this.pos.y, 0, this.ground?.size.y || 0);\r\n    this.actor.update(delta_time);\r\n  }\r\n  render(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.font = \"bold 20px serif\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.globalAlpha = 1;\r\n    ctx.fillText(this.name, this.pos.x, this.pos.y);\r\n    if (this.actor.behavior?.name) {\r\n      ctx.font = \"bold 12px serif\";\r\n      ctx.globalAlpha = 0.5;\r\n      ctx.fillText(this.actor.behavior?.name, this.pos.x, this.pos.y + 20);\r\n    }\r\n  }\r\n}\r\n","import { Behavior } from \"../../behavior\";\r\nimport { Creature } from \"./Creature\";\r\n\r\nexport enum CatBehaviorEnum {\r\n  escaping_from_human = \"escaping from you\",\r\n  interested_in_human = \"interested in you\",\r\n  looking_at_human = \"looking at you\",\r\n}\r\nexport class Cat extends Creature {\r\n  static BehaviorEnum = CatBehaviorEnum;\r\n  human: Creature | undefined;\r\n\r\n  constructor() {\r\n    super();\r\n    this.name = \"Cat\";\r\n    this.color = \"white\";\r\n    this.actor.add_behavior(\r\n      Behavior.Noding(CatBehaviorEnum.escaping_from_human, this).on_update(\r\n        (cat) => this.escaping(),\r\n      ),\r\n      Behavior.Noding(CatBehaviorEnum.interested_in_human, this).on_update(() =>\r\n        this.closing(),\r\n      ),\r\n      Behavior.Noding(CatBehaviorEnum.looking_at_human, this),\r\n    );\r\n    Behavior.Connecting(this.actor)\r\n      .start(CatBehaviorEnum.interested_in_human, 1, 2)\r\n      .end(CatBehaviorEnum.looking_at_human)\r\n      .judge(() => !this.is_too_close() && !this.is_too_far())\r\n      .done();\r\n    Behavior.Connecting(this.actor)\r\n      .start(CatBehaviorEnum.escaping_from_human)\r\n      .end(CatBehaviorEnum.looking_at_human)\r\n      .judge(() => !this.is_too_close() && !this.is_too_far())\r\n      .done();\r\n    Behavior.Connecting(this.actor)\r\n      .start(CatBehaviorEnum.looking_at_human)\r\n      .end(CatBehaviorEnum.interested_in_human)\r\n      .judge(() => this.is_too_far())\r\n      .done();\r\n    Behavior.Connecting(this.actor)\r\n      .start(CatBehaviorEnum.looking_at_human)\r\n      .end(CatBehaviorEnum.escaping_from_human)\r\n      .judge(() => this.is_too_close())\r\n      .done();\r\n    this.actor.use_behavior(CatBehaviorEnum.looking_at_human);\r\n  }\r\n\r\n  override update(delta_time: number): void {\r\n    super.update(delta_time);\r\n    this.human = this.ground?.creatures.find((v) => v.name === \"You\");\r\n  }\r\n\r\n  distance_vector = () => this.pos.clone().sub(this.human?.pos || this.pos);\r\n  direction = () => this.distance_vector().normalize();\r\n  is_too_close = () => this.distance_vector().length() < 100;\r\n  is_too_far = () => this.distance_vector().length() > 200;\r\n  escaping = () => this.pos.add(this.direction());\r\n  closing = () => this.pos.sub(this.direction());\r\n}\r\n","import { useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { __Render } from \"../../DittoImpl\";\r\nimport FPS from \"../../LF2/base/FPS\";\r\nimport { Behavior } from \"../../behavior\";\r\nimport { Cat } from \"./Cat\";\r\nimport { Creature } from \"./Creature\";\r\nimport { Ground } from \"./Ground\";\r\nconst CANVAS_PADDING = 100;\r\nconst GROUND_W = 500;\r\nconst GROUND_H = 500;\r\n\r\nconst cat = new Cat();\r\n\r\nconst human = new Creature();\r\nhuman.name = \"You\";\r\nhuman.color = \"white\";\r\nhuman.pos.x = GROUND_W / 2;\r\nhuman.pos.y = GROUND_H / 2;\r\n\r\nenum HumanBehaviorEnum {\r\n  Moving = \"moving\",\r\n  Standing = \"standing\",\r\n}\r\nBehavior.Noding(HumanBehaviorEnum.Standing).actor(human.actor).done();\r\nhuman.actor.use_behavior(HumanBehaviorEnum.Standing);\r\nBehavior.Connecting(human.actor).done();\r\n\r\nconst groud = new Ground();\r\ngroud.pos.x = CANVAS_PADDING;\r\ngroud.pos.y = CANVAS_PADDING;\r\ngroud.size.x = GROUND_W;\r\ngroud.size.y = GROUND_H;\r\ngroud.add_creature(cat, human);\r\n\r\nexport default function BehaviorNetView() {\r\n  const ref_canvas = useRef<HTMLCanvasElement>(null);\r\n  const ref_ctx = useRef<CanvasRenderingContext2D | null | undefined>(null);\r\n  const ref_pause = useRef(false);\r\n  const ref_time = useRef(0);\r\n  const ref_div_fps = useRef<HTMLDivElement>(null);\r\n\r\n  const [fps] = useMemo(() => {\r\n    const fps = new FPS();\r\n    return [fps];\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    ref_ctx.current = ref_canvas.current?.getContext(\"2d\");\r\n  }, []);\r\n\r\n  const update_once = useCallback((dt: number) => {\r\n    groud.update(dt);\r\n  }, []);\r\n\r\n  const render_once = useCallback(\r\n    (time: number) => {\r\n      const canvas = ref_canvas.current;\r\n      const ctx = ref_ctx.current;\r\n      if (!canvas || !ctx) return;\r\n      const { width, height } = canvas;\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      const dt = time - ref_time.current;\r\n\r\n      if (!ref_pause.current) update_once(dt);\r\n      groud.render(ctx);\r\n\r\n      fps.update(time - ref_time.current);\r\n      ref_time.current = time;\r\n\r\n      if (ref_div_fps.current)\r\n        ref_div_fps.current.innerText = \"\" + Math.floor(fps.value);\r\n    },\r\n    [update_once, fps],\r\n  );\r\n\r\n  useEffect(() => {\r\n    ref_ctx.current = ref_canvas.current?.getContext(\"2d\");\r\n    const _r_id = __Render.add(render_once);\r\n    const on_mousemove = (e: MouseEvent) => {\r\n      human.pos.x = e.offsetX - CANVAS_PADDING;\r\n      human.pos.y = e.offsetY - CANVAS_PADDING;\r\n    };\r\n    document.addEventListener(\"mousemove\", on_mousemove);\r\n    return () => {\r\n      __Render.del(_r_id);\r\n      document.removeEventListener(\"mousemove\", on_mousemove);\r\n    };\r\n  }, [render_once]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        style={{ cursor: \"none\" }}\r\n        ref={ref_canvas}\r\n        width={2 * CANVAS_PADDING + GROUND_W + 1}\r\n        height={2 * CANVAS_PADDING + GROUND_H + 1}\r\n        onContextMenu={(e) => e.preventDefault()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Ditto } from \"../../LF2/ditto\";\r\nimport { Creature } from \"./Creature\";\r\n\r\nexport class Ground {\r\n  pos = new Ditto.Vector2(0, 0);\r\n  size = new Ditto.Vector2(0, 0);\r\n  creatures = new Array<Creature>();\r\n  add_creature(...creatures: Creature[]) {\r\n    this.creatures.push(...creatures);\r\n    for (const c of creatures) c.ground = this;\r\n  }\r\n  update(delta_time: number) {\r\n    this.creatures.forEach((v) => v.update(delta_time));\r\n  }\r\n  render(ctx: CanvasRenderingContext2D) {\r\n    ctx.translate(this.pos.x, this.pos.y);\r\n    ctx.fillStyle = \"green\";\r\n    ctx.fillRect(0, 0, this.size.x, this.size.y);\r\n    this.creatures.forEach((v) => v.render(ctx));\r\n  }\r\n}\r\n"],"names":["Behavior","_Behavior","is_node","v","is_bebavior_node","is_connection","is_bebavior_conn","Actor","constructor","is_debug","warn","_msg","_behavior","_behavior_map","Map","_connection_list","behavior","this","add_behavior","_len","arguments","length","behavior_array","Array","_key","item","done","other","get","name","JSON","stringify","set","find_behavior","use_behavior","_prev$on_leave","_next$on_enter","next","prev","on_leave","call","on_enter","add_connection","_len2","connections","_key2","what","conn","start","end","connection_array","push","update","delta_time","_this$_behavior$on_up","_this$_behavior","on_update","connection","_connection$judge","_this$_behavior$on_le","_this$_behavior2","_connection$end$on_en","_connection$end","judge","_Noding","get_data","_data","get_name","_name","get_context","_on_enter","get_on_enter","get_on_leave","_on_leave","get_on_update","_on_update","actor","_actor","fn","data","context","_context","ret","Noding","_Connecting","_judge","_start","_end","get_start","get_end","on_start_enter","on_start_leave","on_start_update","on_end_enter","on_end_leave","on_end_update","_this$_actor","_this$_actor2","_bebavior_s$data","_bebavior_s$context","_bebavior_s$on_enter","_bebavior_s$on_leave","_bebavior_s$on_update","_bebavior_e$data","_bebavior_e$context","_bebavior_e$on_enter","_bebavior_e$on_leave","_bebavior_e$on_update","bebavior_s","bebavior_e","Connecting","Math","PI","clamp","value","min","max","Creature","ground","pos","Ditto","Vector2","color","_this$ground","_this$ground2","x","size","y","render","ctx","_this$actor$behavior","_this$actor$behavior2","fillStyle","font","textAlign","textBaseline","globalAlpha","fillText","CatBehaviorEnum","Cat","super","human","distance_vector","_this$human","clone","sub","direction","normalize","is_too_close","is_too_far","escaping","add","closing","escaping_from_human","cat","interested_in_human","looking_at_human","creatures","find","BehaviorEnum","CANVAS_PADDING","GROUND_W","GROUND_H","HumanBehaviorEnum","Standing","groud","add_creature","c","forEach","translate","fillRect","BehaviorNetView","ref_canvas","useRef","ref_ctx","ref_pause","ref_time","ref_div_fps","fps","useMemo","FPS","useEffect","_ref_canvas$current","current","getContext","update_once","useCallback","dt","render_once","time","canvas","width","height","innerText","floor","_ref_canvas$current2","_r_id","__Render","on_mousemove","e","offsetX","offsetY","document","addEventListener","del","removeEventListener","_jsx","children","style","cursor","ref","onContextMenu","preventDefault"],"sourceRoot":""}