{"version":3,"file":"static/js/226.29ef8d0c.chunk.js","mappings":"wKAEe,SAASA,IACtB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,SAAU,SAAUC,SAAU,YAAcC,MAAI,GAExG,C,iBCFO,SAASC,EAAUC,GACxB,OAAO,IAAIC,QAAgB,CAACC,EAASC,KACnC,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACiB,mBAAf,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,YAAwBJ,EAAMI,SAAWR,EAAKQ,UACnC,kBAAb,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMS,UAAqBL,EAAMK,OAAST,EAAKS,QAC1DL,EAAMM,QACNN,EAAMO,SAAW,IAAMR,EAAO,UAC9BC,EAAMQ,SAAW,KACVR,EAAMS,MACDT,EAAMS,MAAMC,OACjBZ,EAAQa,MAAMC,KAAKZ,EAAMS,QADAV,EAAO,+BADnBA,EAAO,iCAK/B,CAEO,SAASc,IACd,OAAO,IAAIhB,QAAgB,CAACC,EAASC,KACnC,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACbH,EAAMc,aAAa,YAAa,QAChCd,EAAMc,aAAa,kBAAmB,QACtCd,EAAMM,QACNN,EAAMO,SAAW,IAAMR,EAAO,UAC9BC,EAAMQ,SAAW,KACVR,EAAMS,MACDT,EAAMS,MAAMC,OACjBZ,EAAQa,MAAMC,KAAKZ,EAAMS,QADAV,EAAO,+BADnBA,EAAO,iCAK/B,CA4BO,SAASgB,EACdC,EACApB,GAEA,OAAO,IAAIC,QAA8B,CAACC,EAASC,KACjD,MAAMkB,EAAc,IAAIC,WACxB,OAAQtB,EAAKuB,IACX,IAAK,cACHF,EAAYG,kBAAkBJ,GAC9B,MACF,IAAK,eACHC,EAAYI,mBAAmBL,GAC/B,MACF,IAAK,UACHC,EAAYK,cAAcN,GAC1B,MACF,IAAK,OACHC,EAAYM,WAAWP,EAAU,OAAJpB,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,UACnC,MACF,QACE,OAAOzB,EAAO,kCAElBkB,EAAYQ,OAAS,KACnB,MAAMC,EAAIT,EAAYU,OACtB,OAAQ/B,EAAKuB,IACX,IAAK,cACH,MAAiB,kBAANO,GAAmBA,EAElB5B,EAAQ4B,GADX3B,EAAO,gCAElB,IAAK,eACL,IAAK,UACL,IAAK,OACH,MAAiB,kBAAN2B,EAAuB5B,EAAQ4B,GAC9B3B,EAAO,2BACrB,QACE,OAAOA,EAAO,qCAIxB,C","sources":["Editor/index.tsx","Utils/open_file.ts"],"sourcesContent":["import EditorView from \"../EditorView\";\n\nexport default function Editor() {\n  return (\n    <EditorView style={{ width: '100%', height: '100%', overflow: 'hidden', position: 'relative' }} open />\n  )\n}","export interface i_opts_open_file {\r\n  accept?: string;\r\n  multiple?: boolean;\r\n}\r\nexport function open_file(opts?: i_opts_open_file) {\r\n  return new Promise<File[]>((resolve, reject) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    if (typeof opts?.multiple === \"boolean\") input.multiple = opts.multiple;\r\n    if (typeof opts?.accept === \"string\") input.accept = opts.accept;\r\n    input.click();\r\n    input.oncancel = () => reject(\"cancel\");\r\n    input.onchange = () => {\r\n      if (!input.files) reject(\"[open_file] files got null!\");\r\n      else if (!input.files.length) reject(\"[open_file] files is empty!\");\r\n      else resolve(Array.from(input.files));\r\n    };\r\n  });\r\n}\r\n\r\nexport function open_dir() {\r\n  return new Promise<File[]>((resolve, reject) => {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.setAttribute(\"directory\", \"true\")\r\n    input.setAttribute(\"webkitdirectory\", \"true\")\r\n    input.click();\r\n    input.oncancel = () => reject(\"cancel\");\r\n    input.onchange = () => {\r\n      if (!input.files) reject(\"[open_file] files got null!\");\r\n      else if (!input.files.length) reject(\"[open_file] files is empty!\");\r\n      else resolve(Array.from(input.files));\r\n    };\r\n  });\r\n}\r\n\r\nexport type t_opts_read_file_0 = {\r\n  as: \"ArrayBuffer\";\r\n};\r\nexport type t_opts_read_file_1 = {\r\n  as: \"BinaryString\" | \"DataURL\";\r\n};\r\nexport type t_opts_read_file_2 = {\r\n  as: \"Text\";\r\n  encoding?: string;\r\n};\r\nexport type t_opts_read_file =\r\n  | t_opts_read_file_0\r\n  | t_opts_read_file_1\r\n  | t_opts_read_file_2;\r\nexport function read_file(\r\n  file: File,\r\n  opts: t_opts_read_file_0,\r\n): Promise<ArrayBuffer>;\r\nexport function read_file(\r\n  file: File,\r\n  opts: t_opts_read_file_1,\r\n): Promise<string>;\r\nexport function read_file(\r\n  file: File,\r\n  opts: t_opts_read_file_2,\r\n): Promise<string>;\r\nexport function read_file(\r\n  file: File,\r\n  opts: t_opts_read_file,\r\n): Promise<string | ArrayBuffer> {\r\n  return new Promise<string | ArrayBuffer>((resolve, reject) => {\r\n    const file_reader = new FileReader();\r\n    switch (opts.as) {\r\n      case \"ArrayBuffer\":\r\n        file_reader.readAsArrayBuffer(file);\r\n        break;\r\n      case \"BinaryString\":\r\n        file_reader.readAsBinaryString(file);\r\n        break;\r\n      case \"DataURL\":\r\n        file_reader.readAsDataURL(file);\r\n        break;\r\n      case \"Text\":\r\n        file_reader.readAsText(file, opts?.encoding);\r\n        break;\r\n      default:\r\n        return reject(\"[read_file] unknown read type!\");\r\n    }\r\n    file_reader.onload = () => {\r\n      const r = file_reader.result;\r\n      switch (opts.as) {\r\n        case \"ArrayBuffer\":\r\n          if (typeof r === \"string\" || !r)\r\n            return reject(\"[read_file] not ArrayBuffer!\");\r\n          else return resolve(r);\r\n        case \"BinaryString\":\r\n        case \"DataURL\":\r\n        case \"Text\":\r\n          if (typeof r === \"string\") return resolve(r);\r\n          else return reject(\"[read_file] not string!\");\r\n        default:\r\n          return reject(\"[read_file] unknown read type!\");\r\n      }\r\n    };\r\n  });\r\n}\r\n"],"names":["Editor","_jsx","EditorView","style","width","height","overflow","position","open","open_file","opts","Promise","resolve","reject","input","document","createElement","type","multiple","accept","click","oncancel","onchange","files","length","Array","from","open_dir","setAttribute","read_file","file","file_reader","FileReader","as","readAsArrayBuffer","readAsBinaryString","readAsDataURL","readAsText","encoding","onload","r","result"],"sourceRoot":""}